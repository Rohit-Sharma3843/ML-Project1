# -*- coding: utf-8 -*-
"""FakeNews.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18MM2IdH3kw2ijBSTgzXXjNRyrEjy99gb
"""

import pandas as pd
import numpy as np
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

print(stopwords.words('english'))

df=pd.read_csv('fake.csv')
df.head()

print(df.columns)

port_stem=PorterStemmer()

def stemming(content):
    ans=re.sub('[^a-zA-Z]',' ',content)
    ans=ans.lower()
    ans=ans.split()
    ans=[port_stem.stem(word) for word in ans if not word in stopwords.words('english')]
    ans=' '.join(ans)
    return ans

df.info()

df.head()

df.drop(columns=["Unnamed: 0"],inplace=True)
df.columns

df['content']=df['title']+df['text']

df.drop(columns=['title','text'],inplace=True)

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
df['label']=le.fit_transform(df['label'])

port_stem=PorterStemmer()

def stemming(content):
  ans=re.sub('[^a-zA-Z]',' ',content)
  ans=ans.lower()
  ans=ans.split()
  ans=[port_stem.stem(word) for word in ans if not word in stopwords.words('english')]
  ans=' '.join(ans)
  return ans

df['content']=df['content'].apply(stemming)

X=df['content'].values
y=df['label'].values

df.head()

vectorizer=TfidfVectorizer()
vectorizer.fit(X)
x=vectorizer.fit_transform(X)
import pickle
pickle.dump(vectorizer,open('vectorizer.model','wb'))

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,stratify=y,random_state=2);
X_train = vectorizer.transform(X_train)
X_test = vectorizer.transform(X_test)
print(X_train)

lr=LogisticRegression()
lr.fit(X_train,y_train)

from sklearn.tree import DecisionTreeClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier

dtc=DecisionTreeClassifier(max_depth=10)
dtc.fit(X_train,y_train)
mlp=MLPClassifier()
mlp.fit(X_train,y_train)
knn=KNeighborsClassifier(n_neighbors=10)
knn.fit(X_train,y_train)
svc=SVC(max_iter=100)
svc.fit(X_train,y_train)
rfc=RandomForestClassifier(n_estimators=1000,max_depth=5)
rfc.fit(X_train,y_train)

print(accuracy_score(y_test,dtc.predict(X_test)))
print(accuracy_score(y_test,mlp.predict(X_test)))
print(accuracy_score(y_test,knn.predict(X_test)))
print(accuracy_score(y_test,svc.predict(X_test)))
print(accuracy_score(y_test,rfc.predict(X_test)))

y_pred=lr.predict(X_test)
accuracy_score(y_test,y_pred)

model='fake_news_lr.model'
fp=open(model,'wb')
import pickle
pickle.dump(lr,fp)
fp.close()

model='fake_news_dtc.model'
fp=open(model,'wb')
import pickle
pickle.dump(dtc,fp)
fp.close()

model='fake_news_mlp.model'
fp=open(model,'wb')
import pickle
pickle.dump(mlp,fp)
fp.close()

model='fake_news_knn.model'
fp=open(model,'wb')
import pickle
pickle.dump(knn,fp)
fp.close()

model='fake_news_svc.model'
fp=open(model,'wb')
import pickle
pickle.dump(svc,fp)
fp.close()

model='fake_news_rfc.model'
fp=open(model,'wb')
import pickle
pickle.dump(rfc,fp)
fp.close()